// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  firebaseUid String   @unique
  email       String   @unique
  displayName String?
  photoURL    String?
  username    String?  @unique
  stateCode   String?
  isAdmin     Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  receipts Receipt[]
  expenses Expense[]
  contributions Contribution[]
  pastContributions PastContribution[]
  emailReminders EmailReminder[]

  @@map("users")
}

model Contribution {
  id          String   @id @default(cuid())
  title       String
  description String?
  amount      Decimal  @db.Decimal(10, 2)
  dueDate     DateTime
  isActive    Boolean  @default(true)
  userId      String?  // Optional - null means global contribution for all users
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  receipts Receipt[]
  user     User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("contributions")
}

model Receipt {
  id             String        @id @default(cuid())
  userId         String
  contributionId String
  amount         Decimal       @db.Decimal(10, 2)
  imageUrl       String
  description    String?
  status         ReceiptStatus @default(PENDING)
  adminNotes     String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  contribution Contribution @relation(fields: [contributionId], references: [id], onDelete: Cascade)

  @@map("receipts")
}

model Expense {
  id          String   @id @default(cuid())
  title       String
  description String?
  amount      Decimal  @db.Decimal(10, 2)
  category    String
  date        DateTime
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("expenses")
}

model PastContribution {
  id          String   @id @default(cuid())
  title       String
  description String?
  amount      Decimal  @db.Decimal(10, 2)
  dueDate     DateTime
  userId      String?  // Optional - null means global contribution for all users
  originalId  String   // Reference to the original contribution ID
  archivedAt  DateTime @default(now())
  createdAt   DateTime // Original creation date

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("past_contributions")
}

model EmailReminder {
  id          String   @id @default(cuid())
  userId      String
  emailType   String   // 'reminder', 'welcome', etc.
  sentAt      DateTime @default(now())
  status      String   // 'sent', 'failed', 'bounced'
  errorMessage String?
  nextReminder DateTime? // When to send next reminder

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_reminders")
}

enum ReceiptStatus {
  PENDING
  APPROVED
  REJECTED
}
